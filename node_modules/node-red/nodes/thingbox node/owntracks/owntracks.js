
module.exports = function(RED) {
    
    var connectionPool = require("../../core/io/lib/mqttConnectionPool");
    var util = require("util");
    
    
    function OwntracksNode(n) {
        RED.nodes.createNode(this,n);
        this.topic = n.topic;
        this.broker = n.broker;
        this.port = n.port;

        this.username = n.username;
        this.password = n.password;

        var node = this;
        this.status({fill:"red",shape:"ring",text:"disconnected"},true);
        this.client = connectionPool.get(this.broker,this.port,this.clientid,this.username,this.password);
        this.client.subscribe(this.topic,2,function(topic,payload,qos,retain) {
              
//         	var str = '{"_type": "location", "lat": "47.3402126", "lon": "0.5118826", "tst": "1397761386", "acc": "3827.0"}';
        	var coorown = JSON.parse(payload);
        	payload = {
        			"@context" : "http://schema.org",
        			"@type" : "GeoCordinates",
        			longitude: coorown.lon,
        			latitude: coorown.lat,
        	}
        	
        		var msg = {topic:topic,payload:payload,qos:qos,retain:retain};
                
                
                node.send(msg);
        });
        this.client.on("connectionlost",function() {
            node.status({fill:"red",shape:"ring",text:"disconnected"},true);
        });
        this.client.on("connect",function() {
            node.status({fill:"green",shape:"dot",text:"connected"},true);
        });
        this.client.connect();

    }
    
    RED.nodes.registerType("owntracks", OwntracksNode);
    
    OwntracksNode.prototype.close = function() {
        if (this.client) {
            this.client.disconnect();
        }
    }
}

