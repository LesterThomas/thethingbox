var RED = require(process.env.NODE_RED_HOME+"/red/red");
var connectionPool = require("../../core/io/lib/mqttConnectionPool");

//Node which publish on HiveMQ
function HiveMQNodeOUT(n) {

	RED.nodes.createNode(this,n);

	var client = connectionPool.get("broker.mqtt-dashboard.com", 1883);
	client.connect();

	
	this.on("input", function(msg) {
    	
		var topic = msg.topic || n .topic;
        var value = msg.payload;
 
    	client.publish({
			topic: topic,
    		payload: value,
    	});
        
    });
}

RED.nodes.registerType("HiveMQ out",HiveMQNodeOUT);

HiveMQNodeOUT.prototype.close = function() {
    if (this.client) {
        this.client.disconnect();
    }
}


//Node which listen from HiveMQ

function HiveMQNodeIN(n) {

	RED.nodes.createNode(this,n);
    this.topic = n.topic;
    
	this.client = connectionPool.get("broker.mqtt-dashboard.com", 1883);
	var node = this;
	this.client.subscribe(this.topic,2,function(topic,payload,qos,retain) {
		var msg = {topic:topic,payload:payload,qos:qos,retain:retain};
		node.send(msg);
	});
	this.client.connect();
   
}

RED.nodes.registerType("HiveMQ in",HiveMQNodeIN);

HiveMQNodeIN.prototype.close = function() {
    if (this.client) {
        this.client.disconnect();
    }
}